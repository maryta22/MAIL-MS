# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SendIndividualBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, recipient: str=None, message: str=None):  # noqa: E501
        """SendIndividualBody - a model defined in Swagger

        :param recipient: The recipient of this SendIndividualBody.  # noqa: E501
        :type recipient: str
        :param message: The message of this SendIndividualBody.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'recipient': str,
            'message': str
        }

        self.attribute_map = {
            'recipient': 'recipient',
            'message': 'message'
        }
        self._recipient = recipient
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'SendIndividualBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The send_individual_body of this SendIndividualBody.  # noqa: E501
        :rtype: SendIndividualBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient(self) -> str:
        """Gets the recipient of this SendIndividualBody.

        Recipient address  # noqa: E501

        :return: The recipient of this SendIndividualBody.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: str):
        """Sets the recipient of this SendIndividualBody.

        Recipient address  # noqa: E501

        :param recipient: The recipient of this SendIndividualBody.
        :type recipient: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def message(self) -> str:
        """Gets the message of this SendIndividualBody.

        Message content  # noqa: E501

        :return: The message of this SendIndividualBody.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this SendIndividualBody.

        Message content  # noqa: E501

        :param message: The message of this SendIndividualBody.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
