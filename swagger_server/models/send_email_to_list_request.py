# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SendEmailToListRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sender_email: str=None, sender_name: str=None, subject: str=None, html_content: str=None):  # noqa: E501
        """SendEmailToListRequest - a model defined in Swagger

        :param sender_email: The sender_email of this SendEmailToListRequest.  # noqa: E501
        :type sender_email: str
        :param sender_name: The sender_name of this SendEmailToListRequest.  # noqa: E501
        :type sender_name: str
        :param subject: The subject of this SendEmailToListRequest.  # noqa: E501
        :type subject: str
        :param html_content: The html_content of this SendEmailToListRequest.  # noqa: E501
        :type html_content: str
        """
        self.swagger_types = {
            'sender_email': str,
            'sender_name': str,
            'subject': str,
            'html_content': str
        }

        self.attribute_map = {
            'sender_email': 'sender_email',
            'sender_name': 'sender_name',
            'subject': 'subject',
            'html_content': 'html_content'
        }
        self._sender_email = sender_email
        self._sender_name = sender_name
        self._subject = subject
        self._html_content = html_content

    @classmethod
    def from_dict(cls, dikt) -> 'SendEmailToListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SendEmailToListRequest of this SendEmailToListRequest.  # noqa: E501
        :rtype: SendEmailToListRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender_email(self) -> str:
        """Gets the sender_email of this SendEmailToListRequest.

        Sender's email address  # noqa: E501

        :return: The sender_email of this SendEmailToListRequest.
        :rtype: str
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email: str):
        """Sets the sender_email of this SendEmailToListRequest.

        Sender's email address  # noqa: E501

        :param sender_email: The sender_email of this SendEmailToListRequest.
        :type sender_email: str
        """
        if sender_email is None:
            raise ValueError("Invalid value for `sender_email`, must not be `None`")  # noqa: E501

        self._sender_email = sender_email

    @property
    def sender_name(self) -> str:
        """Gets the sender_name of this SendEmailToListRequest.

        Sender's name  # noqa: E501

        :return: The sender_name of this SendEmailToListRequest.
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name: str):
        """Sets the sender_name of this SendEmailToListRequest.

        Sender's name  # noqa: E501

        :param sender_name: The sender_name of this SendEmailToListRequest.
        :type sender_name: str
        """
        if sender_name is None:
            raise ValueError("Invalid value for `sender_name`, must not be `None`")  # noqa: E501

        self._sender_name = sender_name

    @property
    def subject(self) -> str:
        """Gets the subject of this SendEmailToListRequest.

        Subject of the email  # noqa: E501

        :return: The subject of this SendEmailToListRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this SendEmailToListRequest.

        Subject of the email  # noqa: E501

        :param subject: The subject of this SendEmailToListRequest.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def html_content(self) -> str:
        """Gets the html_content of this SendEmailToListRequest.

        HTML content of the email  # noqa: E501

        :return: The html_content of this SendEmailToListRequest.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content: str):
        """Sets the html_content of this SendEmailToListRequest.

        HTML content of the email  # noqa: E501

        :param html_content: The html_content of this SendEmailToListRequest.
        :type html_content: str
        """
        if html_content is None:
            raise ValueError("Invalid value for `html_content`, must not be `None`")  # noqa: E501

        self._html_content = html_content
